can't create channel with same name in different workspace

http://localhost:3000/api/v1/workspace/b0dc4594-95d3-4cd5-8217-99f14e86a9b8/channel/1c70ae4a-f48d-450f-b010-e5fa4dc5769d/

http://localhost:3000/api/v1/workspace/52fc6031-cf70-43a0-a6c9-6645aa9df116/channel/d9fd3b3b-afc3-49d4-8e5a-58ec168ec7f1

backend
|-config
| |-databases
| | |-mongoconn.js
| | |-postgreconn.js
| |-jwtConfig.js
|-controllers
| |-authController.js
| |-channelController.js
| |-messageController.js
| |-userChannelRelationController.js
| |-userController.js
| |-workspaceController.js
|-middleware
| |-authMiddlerware.js
| |-catchAsyncErrors.js
| |-checkUserRole.js
| |-errorHandler.js
| |-rateLimiter.js
| |-workspaceOwner.js
|-models
| |-activityLogsModel.js
| |-channelModel.js
| |-index.js
| |-messageModel.js
| |-passwordResetModel.js
| |-userChannelRelation.js
| |-userModel.js
| |-userPreferenceModel.js
| |-workspaceModel.js
|-node_modules
|-routes
| |-authRoutes.js
| |-channelRoutes.js
| |-messageRoutes.js
| |-userChannelRelationRoutes.js
| |-userRoutes.js
| |-workspaceRoutes.js
|-services
| |-EmailService.js
| |-googleAuthServices.js
| |-jwtServices.js
|-.env
|-.gitignore
|-app.js
|-package-lock.json
|-package.json
|-README.md
|-server.js
|-test.js
please give me a short prompt for all the GDSC-SLACK project i am making so that i don't have to write whole code again and again to chat with you or any GENAI chat bot, as token are limited , please help me to make the genuine and short prompt in place of code snippent , i need to ask further development questions related to development of backend of the project

directory struucture

backend
|-config
| |-databases
| | |-mongoconn.js
| | |-postgreconn.js
| |-jwtConfig.js
|-controllers
| |-authController.js
| |-channelController.js
| |-messageController.js
| |-userChannelRelationController.js
| |-userController.js
| |-workspaceController.js
|-middleware
| |-authMiddlerware.js
| |-catchAsyncErrors.js
| |-checkUserRole.js
| |-errorHandler.js
| |-rateLimiter.js
| |-workspaceOwner.js
|-models
| |-activityLogsModel.js
| |-channelModel.js
| |-index.js
| |-messageModel.js
| |-passwordResetModel.js
| |-userChannelRelation.js
| |-userModel.js
| |-userPreferenceModel.js
| |-workspaceModel.js
|-node_modules
|-routes
| |-authRoutes.js
| |-channelRoutes.js
| |-messageRoutes.js
| |-userChannelRelationRoutes.js
| |-userRoutes.js
| |-workspaceRoutes.js
|-services
| |-EmailService.js
| |-googleAuthServices.js
| |-jwtServices.js
|-.env
|-.gitignore
|-app.js
|-package-lock.json
|-package.json
|-README.md
|-server.js
|-test.js

//mongoconn.js
import mongoose from "mongoose";

const mongoConnection = async () => {
    try {
        await mongoose.connect(process.env.MONGO_URI, {
            dbName: "gdsc_slack",
            useNewUrlParser: true,
            useUnifiedTopology: true,
            serverSelectionTimeoutMS: 5000
        });
        console.log("MongoDB connected successfully.");
    } catch (err) {
        console.log(`MongoDB connection error: ${err}`);
        process.exit(1);
    }
};

export default mongoConnection;

//postgreconn.js

import { Sequelize } from 'sequelize';
import dotenv from 'dotenv';

dotenv.config();

const postgresConnection = new Sequelize(
  process.env.PG_DB,
  process.env.PG_USER,
  process.env.PG_PASSWORD,
  {
    host: process.env.PG_HOST,
    dialect: 'postgres',
    logging: false,
  }
);

export default postgresConnection;

//jwtConfig.js
export const jwtConfig = {
    secretKey: process.env.JWT_SECRET_KEY ,
    expiresIn: process.env.JWT_EXPIRE , 
    cookieExpire: process.env.COOKIE_EXPIRE ,
};


//userController.js
import User from "../models/userModel.js";
import bcrypt from 'bcrypt';
import JwtService from '../services/jwtServices.js';
import { catchAsyncErrors } from '../middleware/catchAsyncErrors.js';
import ErrorHandler from '../middleware/errorHandler.js';
import { UserPreferences } from '../models/userPreferencesModel.js';
import moment from "moment-timezone";


export const changePassword = catchAsyncErrors(async (req, res, next) => {
    const { currentPassword, newPassword } = req.body;
    const user = await User.findByPk(req.user.id);

    const isPasswordValid = await bcrypt.compare(currentPassword, user.password);
    if (!isPasswordValid) {
        return next(new ErrorHandler("Current password is incorrect", 401));
    }
    try {
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(newPassword, salt);
    } catch (error) {
        return next(new ErrorHandler("Error hashing password", 500));
    }
    await user.save();

    JwtService.sendToken(user, 200, res, "Password changed successfully");
});

export const updateProfile = catchAsyncErrors(async (req, res, next) => {
    const { username, email } = req.body;
    const user = await User.findByPk(req.user.id);

    if (username) user.username = username;
    if (email) {
        const emailExists = await User.findOne({ where: { email } });
        if (emailExists && emailExists.id !== user.id) {
            return next(new ErrorHandler("Email already in use", 400));
        }
        user.email = email;
    }

    await user.save();

    res.status(200).json({
        success: true,
        message: "Profile updated successfully",
        user: {
            id: user.id,
            username: user.username,
            email: user.email
        }
    });
});

export const getCurrentUser = catchAsyncErrors(async (req, res, next) => {
    const user = await User.findByPk(req.user.id, {
        attributes: ['id', 'username', 'email']
    });
    res.status(200).json({ success: true, user });
});

export const getCurrUserPref = catchAsyncErrors(async (req, res, next) => {
    const user_id = req.user.id;
    const userpref = await UserPreferences.findOne({ user_id });
    res.status(200).json({ success: true, userpref });
})

export const deleteCurrUser = catchAsyncErrors(async (req, res, next) => {
    const user_id = req.user.id;
    const user = await User.destroy(
        {
            where: {
                id: user_id,
            }
        }
    );
    const userpref = await UserPreferences.deleteOne({ user_id });
    res.status(200).json({ success: true, user, userpref });
});

export const changeUserPreferences = catchAsyncErrors(async (req, res, next) => {
    const { theme, notifications_enabled, timezone } = req.body;
    const userId = req.user.id;

    let userPreferences = await UserPreferences.findOne({ user_id: userId });
    if (!userPreferences) {
        return next(new ErrorHandler("User preferences not found", 404));
    }

    if (theme) {
        if (!['light', 'dark'].includes(theme)) {
            return next(new ErrorHandler("Invlaid theme option", 400));
        }
        userPreferences.theme = theme;
    }

    if(typeof notifications_enabled === 'boolean'){
        userPreferences.notifications_enabled = notifications_enabled;
    }

    if(timezone){
        if(!moment.tz.names().includes(timezone)){
            return next(new ErrorHandler("Invalid Timezone",400));
        }
        userPreferences.timezone=timezone;
    }

    await userPreferences.save();

    res.status(200).json({
        success:true,
        message:"User Preference Updated Successfully",
        preferences:userPreferences
    })
}
);

//userController.js
import User from "../models/userModel.js";
import bcrypt from 'bcrypt';
import JwtService from '../services/jwtServices.js';
import { catchAsyncErrors } from '../middleware/catchAsyncErrors.js';
import ErrorHandler from '../middleware/errorHandler.js';
import { UserPreferences } from '../models/userPreferencesModel.js';
import moment from "moment-timezone";


export const changePassword = catchAsyncErrors(async (req, res, next) => {
    const { currentPassword, newPassword } = req.body;
    const user = await User.findByPk(req.user.id);

    const isPasswordValid = await bcrypt.compare(currentPassword, user.password);
    if (!isPasswordValid) {
        return next(new ErrorHandler("Current password is incorrect", 401));
    }
    try {
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(newPassword, salt);
    } catch (error) {
        return next(new ErrorHandler("Error hashing password", 500));
    }
    await user.save();

    JwtService.sendToken(user, 200, res, "Password changed successfully");
});

export const updateProfile = catchAsyncErrors(async (req, res, next) => {
    const { username, email } = req.body;
    const user = await User.findByPk(req.user.id);

    if (username) user.username = username;
    if (email) {
        const emailExists = await User.findOne({ where: { email } });
        if (emailExists && emailExists.id !== user.id) {
            return next(new ErrorHandler("Email already in use", 400));
        }
        user.email = email;
    }

    await user.save();

    res.status(200).json({
        success: true,
        message: "Profile updated successfully",
        user: {
            id: user.id,
            username: user.username,
            email: user.email
        }
    });
});

export const getCurrentUser = catchAsyncErrors(async (req, res, next) => {
    const user = await User.findByPk(req.user.id, {
        attributes: ['id', 'username', 'email']
    });
    res.status(200).json({ success: true, user });
});

export const getCurrUserPref = catchAsyncErrors(async (req, res, next) => {
    const user_id = req.user.id;
    const userpref = await UserPreferences.findOne({ user_id });
    res.status(200).json({ success: true, userpref });
})

export const deleteCurrUser = catchAsyncErrors(async (req, res, next) => {
    const user_id = req.user.id;
    const user = await User.destroy(
        {
            where: {
                id: user_id,
            }
        }
    );
    const userpref = await UserPreferences.deleteOne({ user_id });
    res.status(200).json({ success: true, user, userpref });
});

export const changeUserPreferences = catchAsyncErrors(async (req, res, next) => {
    const { theme, notifications_enabled, timezone } = req.body;
    const userId = req.user.id;

    let userPreferences = await UserPreferences.findOne({ user_id: userId });
    if (!userPreferences) {
        return next(new ErrorHandler("User preferences not found", 404));
    }

    if (theme) {
        if (!['light', 'dark'].includes(theme)) {
            return next(new ErrorHandler("Invlaid theme option", 400));
        }
        userPreferences.theme = theme;
    }

    if(typeof notifications_enabled === 'boolean'){
        userPreferences.notifications_enabled = notifications_enabled;
    }

    if(timezone){
        if(!moment.tz.names().includes(timezone)){
            return next(new ErrorHandler("Invalid Timezone",400));
        }
        userPreferences.timezone=timezone;
    }

    await userPreferences.save();

    res.status(200).json({
        success:true,
        message:"User Preference Updated Successfully",
        preferences:userPreferences
    })
}
);

//authMiddleWare.js
import { catchAsyncErrors } from "./catchAsyncErrors.js";
import jwt from "jsonwebtoken";
import User from "../models/userModel.js";
import ErrorHandler from './errorHandler.js';

export const isAuthorized = catchAsyncErrors(async (req, res, next) => {
    const token = req.cookies.token || (req.headers.authorization && req.headers.authorization.split(" ")[1]);
    
    if (!token) {
        return next(new ErrorHandler("USER NOT AUTHORIZED", 401));
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);
    const user = await User.findByPk(decoded.id);
    
    if (!user) {
        return next(new ErrorHandler("USER NOT FOUND", 404));
    }

    req.user = user;
    next();
});

//catchAsyncErrors.js
export const catchAsyncErrors = (theFunction) => {
  return (req, res, next) => {
    Promise.resolve(theFunction(req, res, next)).catch(next);
  };
};


//checkUserRole.js

import UserChannelRelation from "../models/userChannelRelationModel.js";
import ErrorHandler from "./errorHandler.js";
import { catchAsyncErrors } from "./catchAsyncErrors.js";

export const checkUserRole = (...acceptedRoles)=>{
    return catchAsyncErrors(async(req,res,next)=>{
        const userId = req.user.id;
        const {channelId} = req.params;

        const userChannelRelation = await UserChannelRelation.findOne({
            where : {
                user_id : userId,
                channel_id : channelId,
            },
        });

        if(!userChannelRelation){
            return next(new ErrorHandler("USer is not associated with this channel",403));
        }

        const userRole = userChannelRelation.role;
        if(!acceptedRoles.includes(userRole)){
            return next(new ErrorHandler("Access denied. Insufficient role permission.",403));
        }

        req.userchannelrel = userChannelRelation;

        next();
    });
};

//errorHandler.js
class ErrorHandler extends Error {
    constructor(message, statusCode) {
      super(message);
      this.statusCode = statusCode;
      this.isOperational = true; // Mark this error as operational
    }
  }
  
  export const errorMiddleware = (err, req, res, next) => {
    err.statusCode = err.statusCode || 500;
    err.message = err.message || "Internal server error.";
  
    // Handle specific types of errors
    if (err.name === "CastError") {
      const message = `Invalid ${err.path}`;
      err = new ErrorHandler(message, 400);
    } else if (err.code === 11000) {
      const message = `Duplicate ${Object.keys(err.keyValue)} entered.`;
      err = new ErrorHandler(message, 400);
    } else if (err.name === "JsonWebTokenError") {
      const message = `Json Web Token is invalid, try again.`;
      err = new ErrorHandler(message, 400);
    } else if (err.name === "TokenExpiredError") {
      const message = `Json Web Token is expired, try again.`;
      err = new ErrorHandler(message, 400);
    }
  
    // Send response
    res.status(err.statusCode).json({
      success: false,
      message: err.message,
      // Include stack trace only in development
      ...(process.env.NODE_ENV === 'development' && { stack: err.stack }),
    });
  };
  
  export default ErrorHandler;
  //rateLimiter.js
import rateLimit from "express-rate-limit";

export const rateLimiter = (minutes,maxRequests)=>{
    return rateLimit({
        windowMs:minutes*60*1000,
        max:maxRequests,
        message:`Too many requests from this IP, please try again after ${minutes} minutes`,
        headers:true,
    })
}

//workspaceOwner.js
import Workspace from "../models/workspaceModel.js";
import { catchAsyncErrors } from "./catchAsyncErrors.js";
import ErrorHandler from "./errorHandler.js";

export const isWorkspaceOwner =  catchAsyncErrors(async(req,res,next)=>{
    const {workspaceId} = req.params;
    const userId = req.user.id;
    const workspace = await Workspace.findOne({
        where:{
            id:workspaceId,
            owner_id:userId
        }
    });

    if(!workspace){
        return next(new ErrorHandler("You are not owner of workspace",403));
    }
    req.workspace = workspace;
    next();
});

//activityLogsModel.js
import mongoose from "mongoose";

const activityLogsSchema = new mongoose.Schema({
    user_id : {
        type : String,
        required : true,
    },
    action:{
        type : String,
        required : true,
        enum : ["USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_MENTIONED","MESSAGE_EDITED","MESSAGE_DELETED","MESSAGE_SENT","CHANNEL_CREATED","FILE_UPLOADED"],
    },
    timestamp : {
        type : Date,
        default: Date.now,
    },
    details : {
        type : String,
    }
});

export const ActivityLogs = mongoose.model("ActivityLogs",activityLogsSchema);

//channelModel.js import { DataTypes } from 'sequelize'; import postgresConnection from '../config/databases/postgreconn.js'; import Workspace from './workspaceModel.js';  const Channel = postgresConnection.define('Channel', {   id: {     type: DataTypes.UUID,     defaultValue: DataTypes.UUIDV4,     primaryKey: true,   },   name: {     type: DataTypes.STRING,     allowNull: false,     unique: true,   },   workspace_id: {     type: DataTypes.UUID,     references: {       model: Workspace,       key: 'id',     },   },   is_private: {     type: DataTypes.BOOLEAN,     defaultValue: false,   },   created_at: {     type: DataTypes.DATE,     defaultValue: DataTypes.NOW,   }, },{   timestamps:true,   createdAt:'created_at',   updatedAt:false, });  export default Channel; //index.js import postgresConnection from '../config/databases/postgreconn.js'; import User from './userModel.js'; import Workspace from './workspaceModel.js'; import Channel from './channelModel.js'; import UserChannelRelation from './userChannelRelationModel.js';  User.hasMany(Workspace, { foreignKey: 'owner_id' }); Workspace.belongsTo(User, { foreignKey: 'owner_id' });  Workspace.hasMany(Channel, { foreignKey: 'workspace_id' }); Channel.belongsTo(Workspace, { foreignKey: 'workspace_id' });  User.belongsToMany(Channel, { through: UserChannelRelation, foreignKey: 'user_id',as:'UserChannels' }); Channel.belongsToMany(User, { through: UserChannelRelation, foreignKey: 'channel_id',as:'ChannelUsers' });  UserChannelRelation.belongsTo(User,{foreignKey:'user_id'}); UserChannelRelation.belongsTo(Channel,{foreignKey:'channel_id'});  const syncModels = async () => {   try {     await postgresConnection.sync({ alter: true }); // Sync all models     console.log('Database & tables created!');   } catch (error) {     console.error('Error syncing models:', error);   } };  syncModels(); 

//messageModel.js
import mongoose from 'mongoose';

const messageSchema = new mongoose.Schema({
    message: {
        type: String,
        required: true,
    },
    channel_id: {
        type: String,
        required: true,
    },
    user_id: {
        type: String,
        required: true,
    },
    timestamp: {
        type: Date,
        default: Date.now,
    },
    attachments: [
        {
            filename: String,
            url: String,
            filetype: String,
        },
    ],
    edited: {
        type: Boolean,
        default: false,
    },
    reactions: [{
        user_id: String,
        reaction: String,
    }]
});

export const Message = mongoose.model("Message", messageSchema);

//passwordResetModel.js
import mongoose from "mongoose";
import validator from "validator";

const passwordResetSchema = new mongoose.Schema({
    user_id:{
        type:String,
        required:true,
    },
    resetPasswordToken:{
        type:String,
        required:true
    },
    resetPasswordExpire:{
        type:String,
        required:true
    }
});

export const PasswordReset = mongoose.model("PasswordReset",passwordResetSchema);

//userChannelRelationModel.js
import { DataTypes } from 'sequelize';
import postgresConnection from '../config/databases/postgreconn.js';
import User from './userModel.js';
import Channel from './channelModel.js';

const UserChannelRelation = postgresConnection.define('UserChannelRelation', {
  user_id: {
    type: DataTypes.UUID,
    references: {
      model: User,
      key: 'id',
    },
    primaryKey: true,
  },
  channel_id: {
    type: DataTypes.UUID,
    references: {
      model: Channel,
      key: 'id',
    },
    primaryKey: true,
  },
  role: {
    type: DataTypes.ENUM('owner', 'admin', 'member', 'guest'),
    allowNull: false,
  },
  joined_at: {
    type: DataTypes.DATE,
    defaultValue: DataTypes.NOW,
  },
},{
  timestamps:false,
});

export default UserChannelRelation;
//userModel.js
import { DataTypes, Op } from 'sequelize';
import postgresConnection from '../config/databases/postgreconn.js';
import bcrypt from 'bcrypt';
import validator from 'validator';
import jwt from 'jsonwebtoken';

const User = postgresConnection.define('User', {
    id: {
        type: DataTypes.UUID,
        defaultValue: DataTypes.UUIDV4,
        primaryKey: true
    },
    username: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
    },
    email: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
        validate: {
            isEmail:true
        },
    },
    password: {
        type: DataTypes.STRING,
        allowNull: true,
    },
    google_auth_id: {
        type: DataTypes.STRING,
        allowNull:true,
    },
    created_at: {
        type: DataTypes.DATE,
        defaultValue: DataTypes.NOW,
    },
    last_login: {
        type: DataTypes.DATE,
    }
}, {
    timestamps: true,
    createdAt: 'created_at',
    updatedAt: false,
});

User.beforeCreate(async (user) => {
    if (user.password) {
        try {
            const salt = await bcrypt.genSalt(10);
            user.password = await bcrypt.hash(user.password, salt);
        } catch (error) {
            throw new Error("Error hashing password");
        }
    }
});

User.prototype.getJWTToken = function () {
    return jwt.sign({ id: this.id }, process.env.JWT_SECRET_KEY, {
        expiresIn: process.env.JWT_EXPIRE,
    });
};

User.prototype.comparePassword = async function (enteredPassword) {
    if (!this.password) return false; // In case it's a Google Auth user without a password
    return await bcrypt.compare(enteredPassword, this.password);
};

User.isEmailTaken = async function (email, excludeUserId = null) {
    const user = await this.findOne({
        where: { email, ...(excludeUserId && { id: { [Op.ne]: excludeUserId } }) },
    });
    return !!user;
};

export default User;
//userPreferenceModel.js
import mongoose from 'mongoose';
import moment from 'moment-timezone';

const userPreferencesSchema = new mongoose.Schema({
    user_id : {
        type : String,
        required : true,
    },
    theme : {
        type : String,
        enum : ['light','dark'],
        default : 'light',
    },
    notifications_enabled: {
        type:Boolean,
        default:true,
    },
    timezone : {
        type : String,
        default : 'UTC',
        validate : {
            validator:function(value){
                return moment.tz.names().includes(value);
            },
            message:props=>`${props.value} is not a valid timezone!`
        },
    },
});

export const UserPreferences = mongoose.model("UserPreferences",userPreferencesSchema);

//workspaceModel.js

import { DataTypes } from 'sequelize';
import postgresConnection from '../config/databases/postgreconn.js';
import User from './userModel.js';

const Workspace = postgresConnection.define('Workspace', {
  id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true,
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
    validate: {
      len: [3, 50], 
    },
  },
  owner_id: {
    type: DataTypes.UUID,
    references: {
      model: User,
      key: 'id',
    },
  },
  created_at: {
    type: DataTypes.DATE,
    defaultValue: DataTypes.NOW,
  },
},{
  timestamps:true,
  createdAt:'created_at',
  updatedAt:false,
});

export default Workspace;
//authRoutes.js

import express from "express";
import { register, login, googleLogin, logout, forgotPassword, resetPassword} from "../controllers/authController.js";
import { rateLimiter } from "../middleware/rateLimiter.js";

const router = express.Router();

router.post("/register", register);
router.post("/login", login);
router.post("/google", googleLogin);
router.post("/logout", logout);
router.post("/forgot-password", rateLimiter(15,5),forgotPassword);
router.put("/reset-password/:token",resetPassword);


export default router;

//channelRoutes.js

import express from "express";
import {
    createChannel,
    getAllChannels,
    updateChannel,
    deleteChannel
} from "../controllers/channelController.js";
import { isAuthorized } from "../middleware/authMiddleware.js";
import { isWorkspaceOwner } from "../middleware/workspaceOwner.js";
import { checkUserRole } from "../middleware/checkUserRole.js";

const router = express.Router({mergeParams: true});

router.post('/', isAuthorized, isWorkspaceOwner, createChannel);
router.get('/', isAuthorized, getAllChannels);
router.put('/:channelId',isAuthorized,checkUserRole('owner','admin'),updateChannel);
router.delete('/:channelId',isAuthorized,isWorkspaceOwner,deleteChannel);

export default router;
//userChannelRelationRoutes.js

import express from "express";
import {
    addMembersToChannel,
    getAllMembersInChannel,
    removeMembersFromChannel,
    leaveChannel,
    updateMemberRoleInChannel
} from "../controllers/userChannelRelationController.js"
import { isAuthorized } from "../middleware/authMiddleware.js";
import { checkUserRole } from "../middleware/checkUserRole.js";

const router = express.Router({mergeParams: true});

router.post("/", isAuthorized,checkUserRole('owner','admin'), addMembersToChannel);
router.get("/", isAuthorized,checkUserRole('owner','admin','member','guest'), getAllMembersInChannel);
router.delete("/member", isAuthorized, checkUserRole('owner','admin'),removeMembersFromChannel);
router.delete("/leave",isAuthorized, checkUserRole('admin','member','guest'),leaveChannel);
router.put("/:memberId", isAuthorized, checkUserRole('owner','admin'),updateMemberRoleInChannel);

export default router;
//userRoutes.js

import express from "express";
import {changePassword, updateProfile, getCurrentUser, getCurrUserPref, deleteCurrUser, changeUserPreferences} from "../controllers/userController.js"
import { isAuthorized } from "../middleware/authMiddleware.js";

const router = express.Router();

router.put('/change-password', isAuthorized, changePassword);
router.put('/me', isAuthorized, updateProfile);
router.get('/me', isAuthorized, getCurrentUser);
router.delete('/me',isAuthorized,deleteCurrUser);
router.get('/pref',isAuthorized,getCurrUserPref);
router.put('/pref',isAuthorized,changeUserPreferences);

export default router;

//workspaceRoutes.js
import express from "express";
import {createWorkspace, getAllWorkspaces,updateWorkspace,deleteWorkspace, getAllWorkspaces2} from "../controllers/workspaceController.js"
import { isAuthorized } from "../middleware/authMiddleware.js";
import { isWorkspaceOwner } from "../middleware/workspaceOwner.js";

const router = express.Router({mergeParams: true});

router.post("/",isAuthorized,createWorkspace);
router.get("/",isAuthorized,getAllWorkspaces);
router.put("/:workspaceId",isAuthorized,isWorkspaceOwner,updateWorkspace);
router.delete("/:workspaceId",isAuthorized,isWorkspaceOwner,deleteWorkspace);
router.get("/exper",isAuthorized,getAllWorkspaces2);
export default router;

//EmailServie.js

import nodemailer from "nodemailer";

class EmailService {
  constructor({ recipientEmail, emailSubject, emailMessage }) {
    this.recipientEmail = recipientEmail;
    this.emailSubject = emailSubject;
    this.emailMessage = emailMessage;

    this.transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST, // SMTP host (like smtp.gmail.com)
      service: process.env.SMTP_SERVICE, // Email service (like Gmail, SendGrid)
      port: process.env.SMTP_PORT || 587, // Port 587 for secure connections
      auth: {
        user: process.env.SMTP_MAIL, // SMTP email
        pass: process.env.SMTP_PASSWORD, // SMTP password or app-specific password
      },
    });
  }

  async sendEmail() {
    const mailOptions = {
      from: `"Your App" <${process.env.SMTP_MAIL}>`, // Sender email
      to: this.recipientEmail, // Recipient email
      subject: this.emailSubject, // Subject of the email
      text: this.emailMessage, // Plain text body
    };

    try {
      const info = await this.transporter.sendMail(mailOptions);
      console.log('Email sent: %s', info.messageId); // Log the success
      return info;
    } catch (error) {
      console.error('Error sending email:', error); // Log the error
      throw new Error('Email could not be sent');
    }
  }
}

export default EmailService;
//googleAuthServices.js

import { OAuth2Client } from 'google-auth-library';
import User from '../models/userModel.js'; // Adjust the path if needed
import JwtService from './jwtServices.js'; // Import the JwtService

const CLIENT_ID = process.env.GOOGLE_CLIENT_ID;
const CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;
const oauth2Client = new OAuth2Client(CLIENT_ID, CLIENT_SECRET);

/**
 * Verify Google ID Token and get user info
 * @param {string} googleToken - Google ID token
 * @returns {Promise<Object>} - User information
 */
const verifyGoogleToken = async (googleToken) => {
    try {
        const ticket = await oauth2Client.verifyIdToken({
            idToken: googleToken,
            audience: CLIENT_ID,
        });
        const payload = ticket.getPayload();
        return payload;
    } catch (error) {
        throw new Error('Invalid Google Token');
    }
};

/**
 * Handle Google authentication
 * @param {string} googleToken - Google ID token
 * @param {object} res - The response object to send JWT token
 * @returns {Promise<Object>} - User data and JWT token
 */
const authenticateWithGoogle = async (googleToken, res) => {
    const { email, name, sub: googleId } = await verifyGoogleToken(googleToken);
    let user = await User.findOne({ where: { email } });

    if (!user) {
        let username = name;
        let existingUser = await User.findOne({ where: { username } });

        while (existingUser) {
            username = `${name}${Math.floor(Math.random() * 10000)}`;
            existingUser = await User.findOne({ where: { username } });
        }
        user = await User.create({
            email,
            username,
            google_auth_id: googleId,
            password: null,
        });
    }

    JwtService.sendToken(user, 200, res, 'Google authentication successful');
};

export { authenticateWithGoogle };
//jwtServices.js

import jwt from 'jsonwebtoken';
import User from '../models/userModel.js';
import { jwtConfig } from '../config/jwtConfig.js';

class JwtService {
    // Method to generate a JWT token
    static generateToken(user) {
        try {
            return jwt.sign({ id: user.id }, jwtConfig.secretKey, {
                expiresIn: jwtConfig.expiresIn, // From config
            });
        } catch (error) {
            throw new Error('Error generating JWT token');
        }
    }

    // Method to verify a JWT token
    static verifyToken(token) {
        return new Promise((resolve, reject) => {
            jwt.verify(token, jwtConfig.secretKey, (err, decoded) => {
                if (err) {
                    reject(new Error('Invalid or expired token'));
                } else {
                    resolve(decoded);
                }
            });
        });
    }

    // Method to extract the user from the token
    static async getUserFromToken(token) {
        try {
            const decoded = await this.verifyToken(token);
            const user = await User.findByPk(decoded.id);
            
            if (!user) {
                throw new Error('User not found');
            }

            return user;
        } catch (error) {
            throw new Error(error.message || 'Unable to retrieve user from token');
        }
    }

    static sendToken(user, statusCode, res, message) {
        try {
            const token = this.generateToken(user);
            const options = {
                expires: new Date(Date.now() + jwtConfig.cookieExpire * 24 * 60 * 60 * 1000), 
                httpOnly: true, 
            };

            const userData = {
                id: user.id,
                username: user.username,
                email: user.email,
            };

            res.status(statusCode)
                .cookie('token', token, options) 
                .header('Authorization', `Bearer ${token}`) 
                .json({
                    success: true,
                    user: userData,
                    message,
                    token,
                });
        } catch (error) {
            throw new Error('Error sending JWT token');
        }
    }
}

export default JwtService;
//app.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import { errorMiddleware } from './middleware/errorHandler.js';
import authRoutes from './routes/authRoutes.js';
import userRoutes from './routes/userRoutes.js'
import channelRoutes from './routes/channelRoutes.js';
// import messageRoutes from './routes/messageRoutes.js';
import userChannelRelationRoutes from './routes/userChannelRelationRoutes.js'
import workspaceRoutes from './routes/workspaceRoutes.js';
import './models/index.js';

dotenv.config();

const app = express();

app.use(
  cors({
    origin: [process.env.FRONTEND_URL],
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    credentials: true,
  })
);

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

app.use('/api/v1/auth', authRoutes);
app.use('/api/v1/user',userRoutes);
app.use('/api/v1/workspace', workspaceRoutes);
app.use('/api/v1/workspace/:workspaceId/channel', channelRoutes);
app.use('/api/v1/workspace/:workspaceId/channel/:channelId',userChannelRelationRoutes);
// app.use('/api/v1/message', messageRoutes);

// connectMDB();
// connectPDB();

app.use(errorMiddleware); // Error handling middleware

export default app;


//server.js

import http from 'http';
import app from './app.js'; // Importing your Express app
import dotenv from 'dotenv';
import postgresConnection from './config/databases/postgreconn.js';
import mongoConnection from './config/databases/mongoconn.js';
// import logger from "./utils/logger.js";


dotenv.config(); // Load environment variables

// Set up the port from environment variables or default to 5000
const PORT = process.env.PORT || 3000;

async function startServer() {
  try {
    await postgresConnection.authenticate();
    console.log("PostgreSQL connection has been established successfully");

    await mongoConnection();
    console.log("MongoDB connection has been established successfully");

    const server = http.createServer(app);

    // Start listening on the specified port
    server.listen(PORT, () => {
      console.log(`Server running on port ${PORT}`);
    });
  } catch (error) {
    console.log('Unable to start the server: ',error);
    process.exit(1);
  }
}
// Create the HTTP server and pass in the Express app
startServer();
