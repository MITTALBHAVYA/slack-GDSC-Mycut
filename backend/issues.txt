directory structure
backend
|-config
| |-databases
| | |-mongoconn.js
| | |-postgreconn.js
| |-jwtConfig.js
|-controllers
| |-authController.js
| |-channelController.js
| |-messageController.js
| |-userChannelRelationController.js
| |-userController.js
| |-workspaceController.js
|-middleware
| |-authMiddlerware.js
| |-catchAsyncErrors.js
| |-checkUserRole.js
| |-errorHandler.js
| |-rateLimiter.js
| |-workspaceOwner.js
|-models
| |-activityLogsModel.js
| |-channelModel.js
| |-index.js
| |-messageModel.js
| |-passwordResetModel.js
| |-userChannelRelation.js
| |-userModel.js
| |-userPreferenceModel.js
| |-workspaceModel.js
|-node_modules
|-routes
| |-authRoutes.js
| |-channelRoutes.js
| |-messageRoutes.js
| |-userChannelRelationRoutes.js
| |-userRoutes.js
| |-workspaceRoutes.js
|-services
| |-EmailService.js
| |-googleAuthServices.js
| |-jwtServices.js
|-.env
|-.gitignore
|-app.js
|-package-lock.json
|-package.json
|-README.md
|-server.js
|-test.js

//mongoconn.js
import mongoose from "mongoose";
const mongoConnection = async () => {
    try {
        await mongoose.connect(process.env.MONGO_URI, {
            dbName: "gdsc_slack",
            serverSelectionTimeoutMS: 5000
        });
        console.log("MongoDB connected successfully.");
    } catch (err) {
        console.log(`MongoDB connection error: ${err}`);
        process.exit(1);
    }
};
export default mongoConnection;

//postgreconn.js
import { Sequelize } from 'sequelize';
import dotenv from 'dotenv';
dotenv.config();
const postgresConnection = new Sequelize(
  process.env.PG_DB,
  process.env.PG_USER,
  process.env.PG_PASSWORD,
  {
    host: process.env.PG_HOST,
    dialect: 'postgres',
    logging: false,
  }
);
export default postgresConnection;

//jwtConfig.js
export const jwtConfig = {
    secretKey: process.env.JWT_SECRET_KEY ,
    expiresIn: process.env.JWT_EXPIRE , 
    cookieExpire: process.env.COOKIE_EXPIRE ,
};

//authController.js
import User from "../models/userModel.js";
import {UserPreferences} from "../models/userPreferencesModel.js"
import bcrypt from 'bcrypt';
import JwtService from '../services/jwtServices.js';
import { authenticateWithGoogle } from '../services/googleAuthServices.js';
import { catchAsyncErrors } from '../middleware/catchAsyncErrors.js';
import ErrorHandler from '../middleware/errorHandler.js';
import EmailService from "../services/EmailService.js";
import crypto from 'crypto';
import { PasswordReset } from "../models/passwordResetModel.js";
export const register = catchAsyncErrors(async (req, res, next) => {
    const { username, email, password } = req.body;
        const existingUser = await User.findOne({ where: { email } });
        if (existingUser) {
            return next(new ErrorHandler("User already exists with this email", 400));
        }
        const user = await User.create({ username, email, password });
        const user_id = user.id;
        const userPref = await UserPreferences.create({user_id});
        const token = JwtService.generateToken(user);
        JwtService.sendToken(user, 201, res, "User registered successfully");
});
export const login = catchAsyncErrors(async (req, res, next) => {
    const { email, password } = req.body;
        const user = await User.findOne({ where: { email } });
        if (!user) {
            return next(new ErrorHandler("Invalid email or password", 401));
        }
        const isPasswordValid = await user.comparePassword(password);
        if (!isPasswordValid) {
            return next(new ErrorHandler("Invalid email or password", 401));
        }
        const token = JwtService.generateToken(user);
        JwtService.sendToken(user, 200, res, "Login successful");
});
export const googleLogin = catchAsyncErrors(async (req, res, next) => {
    const { token } = req.body;
        const { user, token: jwtToken } = await authenticateWithGoogle(token);
        if (!user) {
            return next(new ErrorHandler("Google authentication failed", 400));
        }
        JwtService.sendToken(user, 200, res, "Google login successful");
});
export const logout = catchAsyncErrors(async (req, res, next) => {
    res
        .status(200)
        .cookie("token", "", {
            expires: new Date(Date.now()),
            httpOnly: true,
            sameSite: 'Strict',
        })
        .json({
            success: true,
            message: "Logged out successfully.",
        });
});
export const forgotPassword = catchAsyncErrors(async (req, res, next) => {
    const { email } = req.body;
    const user = await User.findOne({ where: { email } });
    if (!user) {
        return next(new ErrorHandler("User not found with this email", 404));
    }
    const {id} = user;
    const resetToken = crypto.randomBytes(20).toString('hex');
    const resetPasswordToken = crypto
        .createHash('sha256')
        .update(resetToken)
        .digest('hex');
    const resetPasswordExpire = Date.now() + 15 * 60 * 1000;
    const user_id = id;
    const delPrev = await PasswordReset.deleteMany({user_id});
    const passwordResetData = await PasswordReset.create({ user_id, resetPasswordToken, resetPasswordExpire });
    const emailSubject = `Password Reset Request`;
    const resetUrl = `${process.env.FRONTEND_URL}/reset-password/${resetToken}`;
    const emailMessage = `You requested a password reset. Click here to reset your password: ${resetUrl}\n\n If you did not request this, please ignore this email.`;
    try {
        const emailService = new EmailService({
            recipientEmail: email,
            emailSubject,
            emailMessage,
        });
        await emailService.sendEmail();
        res.status(200).json({
            success: true,
            message: 'Password reset token sent to email',
        })
    } catch (error) {
        return next(new ErrorHandler("Email could not be sent", 500));
    }
});
export const resetPassword = catchAsyncErrors(async (req, res, next) => {
    if (!req.body.password || !req.body.confirmPassword) {
        return next(new ErrorHandler("Please provide a password and confirm it", 400));
    }
    if (req.body.password.length < 8) {
        return next(new ErrorHandler("Password must be at least 8 characters long", 400));
    }
    if (req.body.password !== req.body.confirmPassword) {
        return next(new ErrorHandler("Passwords do not match", 400));
    }
    const resetPasswordToken = crypto
        .createHash('sha256')
        .update(req.params.token)
        .digest('hex');
    const passwordResetData = await PasswordReset.findOne({
        resetPasswordToken,
        resetPasswordExpire: { $gt: Date.now() }
    });
    if (!passwordResetData) {
        return next(new ErrorHandler("Password reset token is invalid or has expired", 400));
    }
    const { user_id } = passwordResetData;
    await PasswordReset.deleteOne({ user_id });
    const user = await User.findOne({ where: { id: user_id } });
    if (!user) {
        return next(new ErrorHandler("User not found", 404));
    }
    try {
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(req.body.password, salt);
    } catch (error) {
        return next(new ErrorHandler("Error hashing password", 500));
    }
    await user.save();
    JwtService.sendToken(user, 200, res, "Password reset successful");
});

//channelController.js
import Channel from "../models/channelModel.js";
import Workspace from "../models/workspaceModel.js";
import UserChannelRelation from "../models/userChannelRelationModel.js";
import { catchAsyncErrors } from "../middleware/catchAsyncErrors.js";
import ErrorHandler from "../middleware/errorHandler.js";
import User from "../models/userModel.js";
import {Op} from 'sequelize';
export const createChannel = catchAsyncErrors(async(req,res,next)=>{
    const {id,owner_id} = req.workspace;
    const workspaceId=id;
    const {name,is_private} = req.body;
    if(!name || name.length<3 || name.length>50){
        return next(new ErrorHandler("Channel name must be between 3 and 50 characters",400));
    }
    const existingChannel = await Channel.findOne({
        where:{
            name,
            workspace_id:workspaceId
        }
    });
    if(existingChannel){
        return next(new ErrorHandler("A channel with this name already exists in the workspace",400));
    }
    const channel = await Channel.create({name,workspace_id:workspaceId,is_private})
    .catch(error => {
        console.log("Error while creating channel:", error); // Debug the Sequelize error
        return next(new ErrorHandler(error.message, 400)); // Return the actual Sequelize validation message
    });
    const userChannelRel = await UserChannelRelation.create({user_id:owner_id,channel_id:channel.id,role:"owner"})
    res.status(201).json({
        success:true,
        message:"Channel created successfully",
        channel,
        userChannelRel
    });
});
export const getAllChannels = catchAsyncErrors(async(req,res,next)=>{
    const {workspaceId} = req.params;
    const workspace_id=workspaceId;
    const user_id = req.user.id;
    const userChannels = await User.findAll({
        where: {
            id: user_id
        },
        include: [{
            model: Channel,
            as: 'UserChannels',
            where: {
                workspace_id
            },
            attributes: ['id', 'name', 'is_private', 'created_at'],
        }],
    });   
    if(!userChannels || userChannels.length === 0){
        return next(new ErrorHandler("No channels found for the user in this workspace",404));
    }
    const channels = userChannels.map(relation=>relation.UserChannels);
    res.status(200).json({
        success:true,
        message:"All channels gathered successfully",
        channels
    });
});
export const updateChannel = catchAsyncErrors(async(req,res,next)=>{
    const {workspaceId,channelId} = req.params;
    const {name,is_private} = req.body;

    const channel = await Channel.findOne({
        where:{id:channelId,workspace_id:workspaceId}
    });
    if(!channel){
        return next(new ErrorHandler("Channel not found",404));
    }
    if (name && name !== channel.name) {
        const existingChannel = await Channel.findOne({
          where: { name, workspace_id: workspaceId },
        });
        if (existingChannel) {
          return next(new ErrorHandler("Channel name already exists in this workspace", 400));
        }
        channel.name = name;
      }
      if (is_private !== undefined) {
        channel.is_private = is_private;
      }
    await channel.save();
    res.status(200).json({
        success:true,
        message:"Channel updated successfully",
        channel,
    });
});
export const deleteChannel = catchAsyncErrors(async (req, res, next) => {
    const { id, owner_id } = req.workspace;
    const workspaceId = id;

    const {channelId} = req.params;
    const channel = await Channel.findOne({ where: { id: channelId, workspace_id: workspaceId } });
    if (!channel) {
        return next(new ErrorHandler("Channel not found in this workspace", 404));
    }
    await UserChannelRelation.destroy({ where: { channel_id: channelId } });

    await channel.destroy();

    res.status(200).json({
        success: true,
        message: "Channel deleted successfully",
    });
});

//messageController.js
import { Message } from "../models/messageModel.js";
import { catchAsyncErrors } from "../middleware/catchAsyncErrors.js";
import ErrorHandler from "../middleware/errorHandler.js";
export const sendMessage = catchAsyncErrors(async(req,res,next)=>{
   const {content} = req.body;
   const {channelId} = req.params;
   const message = await Message.create({
    message : content,
    channel_id : channelId,
    user_id : req.user.id
   });
   if(!message){
      return next(new ErrorHandler("Failed to send the message",500));
   }
   res.status(201).json({
    success:true,
    message
   });
});
export const getChannelMessages = catchAsyncErrors(async(req,res,next)=>{
   const {channelId} = req.params;
   const messages = await Message.find({channel_id:channelId})
   .sort({timestamp:-1})
   .limit(50);
   res.status(200).json({
      success: true,
      messages: messages || []
   });
});
export const editMessage = catchAsyncErrors(async(req,res,next)=>{
   const {messageId} = req.params;
   const {content} = req.body;
   if(!content || content.trim()===""){
      return next(new ErrorHandler("Message content cannot be empty",400));
   }
   const message = await Message.findById(messageId);
   if(!message){
      return next(new ErrorHandler("Message not found",404));
   }
   if(message.user_id !== req.user.id){
      return next(new ErrorHandler("Not authorized to edit this message",403));
   }
   message.message = content;
   message.edited = true;
   await message.save();
   res.status(200).json({
      success:true,
      message
   });
});
export const deleteMessage = catchAsyncErrors(async(req,res,next)=>{
   const {messageId} = req.params;
   const message = await Message.findById(messageId);
   if(!message){
      return next(new ErrorHandler("Message not found",404));
   }
   const userRole = req.userchannelrel.role;
   if((userRole==='member' || userRole==='guest') && message.user_id !==req.user.id){
      return next(new ErrorHandler("Not authorized to delete this message",403));
   }
   if(userRole==='owner' || userRole==='admin' || message.user_id === req.user.id){
      await message.deleteOne();
      return res.status(200).json({
         success : true,
         message:"Message deleted successfully"
      });
   }else{
      return next(new ErrorHandler("Not authorized to delete this message",403));
   }
})

//userChannelRelationController.js
import Channel from "../models/channelModel.js";
import Workspace from "../models/workspaceModel.js";
import UserChannelRelation from "../models/userChannelRelationModel.js";
import { catchAsyncErrors } from "../middleware/catchAsyncErrors.js";
import ErrorHandler from "../middleware/errorHandler.js";
import User from "../models/userModel.js";
import { Op } from "sequelize";
export const addMembersToChannel = catchAsyncErrors(async(req,res,next)=>{
    const {workspaceId,channelId} = req.params;
    const {emails} = req.body;
    const channel = await Channel.findOne({
        where : {
            id:channelId,
            workspace_id:workspaceId,
        }
    })
    if(!channel){
        return next(new ErrorHandler("Channel not found",404));
    }
    const users = await User.findAll({
        where:{
            email : {
                [Op.in]:emails,
            }
        },
        attributes:['id','email','username'],
    });
    const foundEmails = users.map(user => user.email);
    const invalidEmails = emails.filter(email => !foundEmails.includes(email));
    if(invalidEmails.length>0){
        return res.status(404).json({
            success:false,
            message:"Some users not found with the given emails",
            invalidEmails:invalidEmails
        });
    }
    const userChannelRelations = users.map(user=>({
        user_id:user.id,
        channel_id:channelId,
        role:'member'
    }));
    await UserChannelRelation.bulkCreate(userChannelRelations);
    res.status(200).json({
        success:true,
        message:"Members added to the channel successfully",
        addedMembers : foundEmails
    })
    
});
export const getAllMembersInChannel = catchAsyncErrors(async (req, res, next) => {
    const { workspaceId, channelId } = req.params;
    const userChannelRelations = await UserChannelRelation.findAll({
        where: {
            channel_id: channelId
        },
        include: [{
            model: User,
            attributes: ['id', 'username', 'email'] 
        }, {
            model: Channel,
            attributes: [],
            where: {
                workspace_id: workspaceId
            }
        }]
    });
    if (!userChannelRelations || userChannelRelations.length === 0) {
        return res.status(200).json({
            success: true,
            message: "No members found in this channel",
            data: []
        });
    }
    // Extract user details and role from the relations
    const memberData = userChannelRelations.map(relation => ({
        userId: relation.User.id,
        username: relation.User.username,
        email: relation.User.email,
        role: relation.role // Access the role directly from UserChannelRelation
    }));
    res.status(200).json({
        success: true,
        message: `Found ${memberData.length} members in the channel`,
        data: memberData
    });
});
export const removeMembersFromChannel = catchAsyncErrors(async (req, res, next) => {
    const { channelId } = req.params;
    const { userIds } = req.body;
    if (!userIds || userIds.length === 0) {
        return res.status(400).json({
            success: false,
            message: "No user IDs provided."
        });
    }
    const channel = await Channel.findOne({
        where: { id: channelId },
        include: [{
            model: Workspace,
            attributes: ['owner_id']
        }]
    });
    if (!channel) {
        return res.status(404).json({
            success: false,
            message: "Channel not found."
        });
    }
    const ownerId = channel.Workspace.owner_id;
    if (userIds.includes(ownerId)) {
        return res.status(400).json({
            success: false,
            message: "Owner cannot be removed from the channel."
        });
    }
    const userChannelRelations = await UserChannelRelation.findAll({
        where: {
            user_id: userIds,
            channel_id: channelId
        }
    });
    if (userChannelRelations.length === 0) {
        return res.status(404).json({
            success: false,
            message: "No members found in the specified channel for the given user IDs."
        });
    } 
    await UserChannelRelation.destroy({
        where: {
            user_id: userIds,
            channel_id: channelId
        }
    });
    res.status(200).json({
        success: true,
        message: `Users with IDs ${userIds.join(', ')} removed from channel with ID ${channelId}.`
    });
});
export const leaveChannel = catchAsyncErrors(async(req,res,next)=>{
    const {channelId,workspaceId} = req.params;
    const userId = req.user.id;
    const userChannelRelation = await UserChannelRelation.findOne({
        where:{
            user_id:userId,
            channel_id:channelId
        },
    });
    if(!userChannelRelation){
        return next(new ErrorHandler("User is not a member of this channel.",404));
    }
    await UserChannelRelation.destroy({
        where:{
            user_id:userId,
            channel_id:channelId
        }
    })
    res.status(200).json({
        success: true,
        message: `User ${userId} leave the channel successfully.`
    });
});
export const updateMemberRoleInChannel = catchAsyncErrors(async(req,res,next)=>{
    const {memberId} = req.params;
    const {newRole} = req.body;
    const channelId = req.userchannelrel.channel_id;
    const roleTransition = {
        guest : ['member','admin'],
        member:['guest','admin'],
        admin:['member','guest'],
    };
    const userChannelRelation = await UserChannelRelation.findOne({
        where:{
            user_id:memberId,
            channel_id:channelId
        },
    });
    if(!userChannelRelation){
        return res.status(404).json({
            success:false,
            message:"Member not found in the specified channel",
        });
    }
    const currentRole = userChannelRelation.role;
    if(!roleTransition[currentRole]?.includes(newRole)){
        return res.status(404).json({
            success:false,
            message:`Role transition from ${currentRole} to ${newRole} is not allowed`,
        });
    }
    userChannelRelation.role = newRole;
    await userChannelRelation.save();
    res.status(200).json({
        success: true,
        message: `Role updated successfully from ${currentRole} to ${newRole}`,
        updatedRole: userChannelRelation,
    });
});

//userController.js
import User from "../models/userModel.js";
import bcrypt from 'bcrypt';
import JwtService from '../services/jwtServices.js';
import { catchAsyncErrors } from '../middleware/catchAsyncErrors.js';
import ErrorHandler from '../middleware/errorHandler.js';
import { UserPreferences } from '../models/userPreferencesModel.js';
import moment from "moment-timezone";
export const changePassword = catchAsyncErrors(async (req, res, next) => {
    const { currentPassword, newPassword } = req.body;
    const user = await User.findByPk(req.user.id);
    const isPasswordValid = await bcrypt.compare(currentPassword, user.password);
    if (!isPasswordValid) {
        return next(new ErrorHandler("Current password is incorrect", 401));
    }
    try {
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(newPassword, salt);
    } catch (error) {
        return next(new ErrorHandler("Error hashing password", 500));
    }
    await user.save();

    JwtService.sendToken(user, 200, res, "Password changed successfully");
});
export const updateProfile = catchAsyncErrors(async (req, res, next) => {
    const { username, email } = req.body;
    const user = await User.findByPk(req.user.id);
    if (username) user.username = username;
    if (email) {
        const emailExists = await User.findOne({ where: { email } });
        if (emailExists && emailExists.id !== user.id) {
            return next(new ErrorHandler("Email already in use", 400));
        }
        user.email = email;
    }
    await user.save();
    res.status(200).json({
        success: true,
        message: "Profile updated successfully",
        user: {
            id: user.id,
            username: user.username,
            email: user.email
        }
    });
});
export const getCurrentUser = catchAsyncErrors(async (req, res, next) => {
    const user = await User.findByPk(req.user.id, {
        attributes: ['id', 'username', 'email']
    });
    res.status(200).json({ success: true, user });
});
export const getCurrUserPref = catchAsyncErrors(async (req, res, next) => {
    const user_id = req.user.id;
    const userpref = await UserPreferences.findOne({ user_id });
    res.status(200).json({ success: true, userpref });
})
export const deleteCurrUser = catchAsyncErrors(async (req, res, next) => {
    const user_id = req.user.id;
    const user = await User.destroy(
        {
            where: {
                id: user_id,
            }
        }
    );
    const userpref = await UserPreferences.deleteOne({ user_id });
    res.status(200).json({ success: true, user, userpref });
});
export const changeUserPreferences = catchAsyncErrors(async (req, res, next) => {
    const { theme, notifications_enabled, timezone } = req.body;
    const userId = req.user.id;
    let userPreferences = await UserPreferences.findOne({ user_id: userId });
    if (!userPreferences) {
        return next(new ErrorHandler("User preferences not found", 404));
    }
    if (theme) {
        if (!['light', 'dark'].includes(theme)) {
            return next(new ErrorHandler("Invlaid theme option", 400));
        }
        userPreferences.theme = theme;
    }
    if(typeof notifications_enabled === 'boolean'){
        userPreferences.notifications_enabled = notifications_enabled;
    }
    if(timezone){
        if(!moment.tz.names().includes(timezone)){
            return next(new ErrorHandler("Invalid Timezone",400));
        }
        userPreferences.timezone=timezone;
    }
    await userPreferences.save();
    res.status(200).json({
        success:true,
        message:"User Preference Updated Successfully",
        preferences:userPreferences
    })
}
);

//workspaceController.js
import { catchAsyncErrors } from "../middleware/catchAsyncErrors.js";
import ErrorHandler from "../middleware/errorHandler.js";
import Workspace from "../models/workspaceModel.js";
import Channel from "../models/channelModel.js";
import UserChannelRelation from "../models/userChannelRelationModel.js";
import { Op, Sequelize } from "sequelize";
export const createWorkspace = catchAsyncErrors(async (req, res, next) => {
    const owner_id = req.user.id;
    const { name } = req.body;
    if (!name || name.length < 3 || name.length > 50) {
        return next(new ErrorHandler("Workspace name must be between 3 and 50 characters", 400));
    }
    const existingWorkspace = await Workspace.findOne({
        where: { owner_id, name },
    });
    if (existingWorkspace) {
        return next(new ErrorHandler("Workspace with the same name already exists", 400));
    }
    const workspace = await Workspace.create({ owner_id, name });
    res.status(201).json({
        success: true,
        message: "Workspace created successfully",
        workspace,
    });
});
export const getAllWorkspaces2 = catchAsyncErrors(async (req, res, next) => {
    const owner_id = req.user.id;
    const workspaces = await Workspace.findAll({ where: { owner_id } });
    if (!workspaces || workspaces.length === 0) {
        return res.status(200).json({
            success: true,
            message: "No workspaces found for this user",
            workspaces: []
        });
    }
    res.status(200).json({
        success: true,
        message: "All workspaces gathered successfully",
        workspaces : workspaces
    });
});
export const getAllWorkspaces = catchAsyncErrors(async (req, res, next) => {
    const userId = req.user.id;
    const workspaces = await Workspace.findAll({
        where: {
            [Op.or]: [
                { owner_id: userId }, 
                {
                    id: {
                        [Op.in]: Sequelize.literal(`(
                             SELECT w.id FROM public."Workspaces" w 
                             INNER JOIN public."Channels" c ON w.id = c.workspace_id
                             INNER JOIN public."UserChannelRelations" ucr ON ucr.channel_id = c.id
                             WHERE ucr.user_id = '${userId}'
                        )`) 
                    }
                }
            ]
        },
        group:['Workspace.id'],
    });
    if (!workspaces || workspaces.length === 0) {
        return res.status(200).json({
            success: true,
            message: "No workspaces found for this user",
            workspaces: []
        });
    }
    res.status(200).json({
        success: true,
        message: "All workspaces gathered successfully",
        workspaces: workspaces
    });
});
export const updateWorkspace = catchAsyncErrors(async (req, res, next) => {
    const { name } = req.body;
    const workspaceId = req.workspace.id;
    const owner_id = req.workspace.owner_id;
    const workspace = await Workspace.findOne({ where: { id:workspaceId, owner_id } });
    if (!name || name.length < 3 || name.length > 50) {
        return next(new ErrorHandler("Workspace name must be between 3 and 50 characters", 400));
    }
    const existingWorkspace = await Workspace.findOne({
        where: {
            owner_id,
            name,
            id: { [Op.ne]: workspaceId }, 
        },
    });
    if (existingWorkspace) {
        return next(new ErrorHandler("Workspace with this name already exists", 400));
    }
    workspace.name = name;
    await workspace.save();
    res.status(200).json({
        success: true,
        message: "Workspace updated successfully",
        data: workspace
    });
});
export const deleteWorkspace = catchAsyncErrors(async (req, res, next) => {
    const workspaceId = req.workspace.id;
    const owner_id = req.workspace.owner_id;
    const channels = await Channel.findAll({ where: { workspace_id: workspaceId } });
    await UserChannelRelation.destroy({ where: { channel_id: channels.map(channel => channel.id) } });
    await Channel.destroy({ where: { workspace_id: workspaceId} });
    await req.workspace.destroy();
    res.status(200).json({
        success: true,
        message: "Workspace and all associated channels deleted successfully",
    });
});

//authMiddleWare.js
import { catchAsyncErrors } from "./catchAsyncErrors.js";
import jwt from "jsonwebtoken";
import User from "../models/userModel.js";
import ErrorHandler from './errorHandler.js';
export const isAuthorized = catchAsyncErrors(async (req, res, next) => {
    const token = req.cookies.token || (req.headers.authorization && req.headers.authorization.split(" ")[1]);
    if (!token) {
        return next(new ErrorHandler("USER NOT AUTHORIZED", 401));
    }
    const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);
    const user = await User.findByPk(decoded.id);
    if (!user) {
        return next(new ErrorHandler("USER NOT FOUND", 404));
    }
    req.user = user;
    next();
});

//catchAsyncErrors.js
export const catchAsyncErrors = (theFunction) => {
  return (req, res, next) => {
    Promise.resolve(theFunction(req, res, next)).catch(next);
  };
};

//checkUserRole.js
import UserChannelRelation from "../models/userChannelRelationModel.js";
import ErrorHandler from "./errorHandler.js";
import { catchAsyncErrors } from "./catchAsyncErrors.js";
export const checkUserRole = (...acceptedRoles)=>{
    return catchAsyncErrors(async(req,res,next)=>{
        const userId = req.user.id;
        const {channelId} = req.params;
        const userChannelRelation = await UserChannelRelation.findOne({
            where : {
                user_id : userId,
                channel_id : channelId,
            },
        });
        if(!userChannelRelation){
            return next(new ErrorHandler("USer is not associated with this channel",403));
        }
        const userRole = userChannelRelation.role;
        if(!acceptedRoles.includes(userRole)){
            return next(new ErrorHandler("Access denied. Insufficient role permission.",403));
        }
        req.userchannelrel = userChannelRelation;
        next();
    });
};

//errorHandler.js
class ErrorHandler extends Error {
    constructor(message, statusCode) {
      super(message);
      this.statusCode = statusCode;
      this.isOperational = true; // Mark this error as operational
    }
  }
  export const errorMiddleware = (err, req, res, next) => {
    err.statusCode = err.statusCode || 500;
    err.message = err.message || "Internal server error.";
    // Handle specific types of errors
    if (err.name === "CastError") {
      const message = `Invalid ${err.path}`;
      err = new ErrorHandler(message, 400);
    } else if (err.code === 11000) {
      const message = `Duplicate ${Object.keys(err.keyValue)} entered.`;
      err = new ErrorHandler(message, 400);
    } else if (err.name === "JsonWebTokenError") {
      const message = `Json Web Token is invalid, try again.`;
      err = new ErrorHandler(message, 400);
    } else if (err.name === "TokenExpiredError") {
      const message = `Json Web Token is expired, try again.`;
      err = new ErrorHandler(message, 400);
    }
    // Send response
    res.status(err.statusCode).json({
      success: false,
      message: err.message,
      // Include stack trace only in development
      ...(process.env.NODE_ENV === 'development' && { stack: err.stack }),
    });
  };
  export default ErrorHandler;

//rateLimiter.js
import rateLimit from "express-rate-limit";
export const rateLimiter = (minutes,maxRequests)=>{
    return rateLimit({
        windowMs:minutes*60*1000,
        max:maxRequests,
        message:`Too many requests from this IP, please try again after ${minutes} minutes`,
        headers:true,
    })
}

//workspaceOwner.js
import Workspace from "../models/workspaceModel.js";
import { catchAsyncErrors } from "./catchAsyncErrors.js";
import ErrorHandler from "./errorHandler.js";
export const isWorkspaceOwner =  catchAsyncErrors(async(req,res,next)=>{
    const {workspaceId} = req.params;
    const userId = req.user.id;
    const workspace = await Workspace.findOne({
        where:{
            id:workspaceId,
            owner_id:userId
        }
    });
    if(!workspace){
        return next(new ErrorHandler("You are not owner of workspace",403));
    }
    req.workspace = workspace;
    next();
});

//activityLogsModel.js
import mongoose from "mongoose";
const activityLogsSchema = new mongoose.Schema({
    user_id : {
        type : String,
        required : true,
    },
    action:{
        type : String,
        required : true,
        enum : ["USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_MENTIONED","MESSAGE_EDITED","MESSAGE_DELETED","MESSAGE_SENT","CHANNEL_CREATED","FILE_UPLOADED"],
    },
    timestamp : {
        type : Date,
        default: Date.now,
    },
    details : {
        type : String,
    }
});
export const ActivityLogs = mongoose.model("ActivityLogs",activityLogsSchema);

//channelModel.js
import { DataTypes } from 'sequelize';
import postgresConnection from '../config/databases/postgreconn.js';
import Workspace from './workspaceModel.js';
const Channel = postgresConnection.define('Channel', {
  id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true,
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
  workspace_id: {
    type: DataTypes.UUID,
    references: {
      model: Workspace,
      key: 'id',
    },
  },
  is_private: {
    type: DataTypes.BOOLEAN,
    defaultValue: false,
  },
  created_at: {
    type: DataTypes.DATE,
    defaultValue: DataTypes.NOW,
  },
},{
  timestamps:true,
  createdAt:'created_at',
  updatedAt:false,
});
export default Channel;

//index.js
import postgresConnection from '../config/databases/postgreconn.js';
import User from './userModel.js';
import Workspace from './workspaceModel.js';
import Channel from './channelModel.js';
import UserChannelRelation from './userChannelRelationModel.js';
User.hasMany(Workspace, { foreignKey: 'owner_id' });
Workspace.belongsTo(User, { foreignKey: 'owner_id' });
Workspace.hasMany(Channel, { foreignKey: 'workspace_id' });
Channel.belongsTo(Workspace, { foreignKey: 'workspace_id' });
User.belongsToMany(Channel, { through: UserChannelRelation, foreignKey: 'user_id',as:'UserChannels' });
Channel.belongsToMany(User, { through: UserChannelRelation, foreignKey: 'channel_id',as:'ChannelUsers' });
UserChannelRelation.belongsTo(User,{foreignKey:'user_id'});
UserChannelRelation.belongsTo(Channel,{foreignKey:'channel_id'});
const syncModels = async () => {
  try {
    await postgresConnection.sync({ alter: true }); // Sync all models
    console.log('Database & tables created!');
  } catch (error) {
    console.error('Error syncing models:', error);
  }
};
syncModels();

//messageModel.js
import mongoose from 'mongoose';
const messageSchema = new mongoose.Schema({
    message: {
        type: String,
        required: true,
    },
    channel_id: {
        type: String,
        required: true,
    },
    user_id: {
        type: String,
        required: true,
    },
    timestamp: {
        type: Date,
        default: Date.now,
    },
    attachments: [
        {
            filename: String,
            url: String,
            filetype: String,
        },
    ],
    edited: {
        type: Boolean,
        default: false,
    },
    reactions: [{
        user_id: String,
        reaction: String,
    }]
});
export const Message = mongoose.model("Message", messageSchema);

//passwordResetModel.js
import mongoose from "mongoose";
import validator from "validator";
const passwordResetSchema = new mongoose.Schema({
    user_id:{
        type:String,
        required:true,
    },
    resetPasswordToken:{
        type:String,
        required:true
    },
    resetPasswordExpire:{
        type:String,
        required:true
    }
});
export const PasswordReset = mongoose.model("PasswordReset",passwordResetSchema);

//userChannelRelationModel.js
import { DataTypes } from 'sequelize';
import postgresConnection from '../config/databases/postgreconn.js';
import User from './userModel.js';
import Channel from './channelModel.js';
const UserChannelRelation = postgresConnection.define('UserChannelRelation', {
  user_id: {
    type: DataTypes.UUID,
    references: {
      model: User,
      key: 'id',
    },
    primaryKey: true,
  },
  channel_id: {
    type: DataTypes.UUID,
    references: {
      model: Channel,
      key: 'id',
    },
    primaryKey: true,
  },
  role: {
    type: DataTypes.ENUM('owner', 'admin', 'member', 'guest'),
    allowNull: false,
  },
  joined_at: {
    type: DataTypes.DATE,
    defaultValue: DataTypes.NOW,
  },
},{
  timestamps:false,
});
export default UserChannelRelation;

//userModel.js
import { DataTypes, Op } from 'sequelize';
import postgresConnection from '../config/databases/postgreconn.js';
import bcrypt from 'bcrypt';
import validator from 'validator';
import jwt from 'jsonwebtoken';
const User = postgresConnection.define('User', {
    id: {
        type: DataTypes.UUID,
        defaultValue: DataTypes.UUIDV4,
        primaryKey: true
    },
    username: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
    },
    email: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
        validate: {
            isEmail:true
        },
    },
    password: {
        type: DataTypes.STRING,
        allowNull: true,
    },
    google_auth_id: {
        type: DataTypes.STRING,
        allowNull:true,
    },
    created_at: {
        type: DataTypes.DATE,
        defaultValue: DataTypes.NOW,
    },
    last_login: {
        type: DataTypes.DATE,
    }
}, {
    timestamps: true,
    createdAt: 'created_at',
    updatedAt: false,
});
User.beforeCreate(async (user) => {
    if (user.password) {
        try {
            const salt = await bcrypt.genSalt(10);
            user.password = await bcrypt.hash(user.password, salt);
        } catch (error) {
            throw new Error("Error hashing password");
        }
    }
});
User.prototype.getJWTToken = function () {
    return jwt.sign({ id: this.id }, process.env.JWT_SECRET_KEY, {
        expiresIn: process.env.JWT_EXPIRE,
    });
};
User.prototype.comparePassword = async function (enteredPassword) {
    if (!this.password) return false; // In case it's a Google Auth user without a password
    return await bcrypt.compare(enteredPassword, this.password);
};
User.isEmailTaken = async function (email, excludeUserId = null) {
    const user = await this.findOne({
        where: { email, ...(excludeUserId && { id: { [Op.ne]: excludeUserId } }) },
    });
    return !!user;
};
export default User;

//userPreferenceModel.js
import mongoose from 'mongoose';
import moment from 'moment-timezone';
const userPreferencesSchema = new mongoose.Schema({
    user_id : {
        type : String,
        required : true,
    },
    theme : {
        type : String,
        enum : ['light','dark'],
        default : 'light',
    },
    notifications_enabled: {
        type:Boolean,
        default:true,
    },
    timezone : {
        type : String,
        default : 'UTC',
        validate : {
            validator:function(value){
                return moment.tz.names().includes(value);
            },
            message:props=>`${props.value} is not a valid timezone!`
        },
    },
});
export const UserPreferences = mongoose.model("UserPreferences",userPreferencesSchema);

//workspaceModel.js
import { DataTypes } from 'sequelize';
import postgresConnection from '../config/databases/postgreconn.js';
import User from './userModel.js';
const Workspace = postgresConnection.define('Workspace', {
  id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true,
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
    validate: {
      len: [3, 50], 
    },
  },
  owner_id: {
    type: DataTypes.UUID,
    references: {
      model: User,
      key: 'id',
    },
  },
  created_at: {
    type: DataTypes.DATE,
    defaultValue: DataTypes.NOW,
  },
},{
  timestamps:true,
  createdAt:'created_at',
  updatedAt:false,
});
export default Workspace;

//authRoutes.js
import express from "express";
import { register, login, googleLogin, logout, forgotPassword, resetPassword} from "../controllers/authController.js";
import { rateLimiter } from "../middleware/rateLimiter.js";
const router = express.Router();
router.post("/register", register);
router.post("/login", login);
router.post("/google", googleLogin);
router.post("/logout", logout);
router.post("/forgot-password", rateLimiter(15,5),forgotPassword);
router.put("/reset-password/:token",resetPassword);
export default router;

//channelRoutes.js
import express from "express";
import {
    createChannel,
    getAllChannels,
    updateChannel,
    deleteChannel
} from "../controllers/channelController.js";
import { isAuthorized } from "../middleware/authMiddleware.js";
import { isWorkspaceOwner } from "../middleware/workspaceOwner.js";
import { checkUserRole } from "../middleware/checkUserRole.js";
const router = express.Router({mergeParams: true});
router.post('/', isAuthorized, isWorkspaceOwner, createChannel);
router.get('/', isAuthorized, getAllChannels);
router.put('/:channelId',isAuthorized,checkUserRole('owner','admin'),updateChannel);
router.delete('/:channelId',isAuthorized,isWorkspaceOwner,deleteChannel);
export default router;

//messageRoutes.js
import express from 'express';
import {isAuthorized} from "../middleware/authMiddleware.js";
import { checkUserRole } from '../middleware/checkUserRole.js';
import {sendMessage,getChannelMessages,editMessage,deleteMessage,} from "../controllers/messageController.js";
const router = express.Router({mergeParams:true});
router.post("/",isAuthorized,checkUserRole('owner','admin','member','guest'),sendMessage);
router.get("/",isAuthorized,checkUserRole('owner','admin','member','guest'),getChannelMessages);
router.put("/:messageId",isAuthorized,checkUserRole('owner','admin','member','guest'),editMessage);
router.delete("/:messageId",isAuthorized,checkUserRole('owner','admin','member','guest'),deleteMessage);
export default router;

//userChannelRelationRoutes.js
import express from "express";
import {addMembersToChannel,getAllMembersInChannel,removeMembersFromChannel,leaveChannel,updateMemberRoleInChannel} from "../controllers/userChannelRelationController.js"
import { isAuthorized } from "../middleware/authMiddleware.js";
import { checkUserRole } from "../middleware/checkUserRole.js";
const router = express.Router({mergeParams: true});
router.post("/", isAuthorized,checkUserRole('owner','admin'), addMembersToChannel);
router.get("/", isAuthorized,checkUserRole('owner','admin','member','guest'), getAllMembersInChannel);
router.delete("/member", isAuthorized, checkUserRole('owner','admin'),removeMembersFromChannel);
router.delete("/leave",isAuthorized, checkUserRole('admin','member','guest'),leaveChannel);
router.put("/:memberId", isAuthorized, checkUserRole('owner','admin'),updateMemberRoleInChannel);
export default router;

//userRoutes.js
import express from "express";
import {changePassword, updateProfile, getCurrentUser, getCurrUserPref, deleteCurrUser, changeUserPreferences} from "../controllers/userController.js"
import { isAuthorized } from "../middleware/authMiddleware.js";
const router = express.Router();
router.put('/change-password', isAuthorized, changePassword);
router.put('/me', isAuthorized, updateProfile);
router.get('/me', isAuthorized, getCurrentUser);
router.delete('/me',isAuthorized,deleteCurrUser);
router.get('/pref',isAuthorized,getCurrUserPref);
router.put('/pref',isAuthorized,changeUserPreferences);
export default router;

//workspaceRoutes.js
import express from "express";
import {createWorkspace, getAllWorkspaces,updateWorkspace,deleteWorkspace, getAllWorkspaces2} from "../controllers/workspaceController.js"
import { isAuthorized } from "../middleware/authMiddleware.js";
import { isWorkspaceOwner } from "../middleware/workspaceOwner.js";
const router = express.Router({mergeParams: true});
router.post("/",isAuthorized,createWorkspace);
router.get("/",isAuthorized,getAllWorkspaces);
router.put("/:workspaceId",isAuthorized,isWorkspaceOwner,updateWorkspace);
router.delete("/:workspaceId",isAuthorized,isWorkspaceOwner,deleteWorkspace);
router.get("/exper",isAuthorized,getAllWorkspaces2);
export default router;

//EmailServie.js
import nodemailer from "nodemailer";
class EmailService {
  constructor({ recipientEmail, emailSubject, emailMessage }) {
    this.recipientEmail = recipientEmail;
    this.emailSubject = emailSubject;
    this.emailMessage = emailMessage;
    this.transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST, // SMTP host (like smtp.gmail.com)
      service: process.env.SMTP_SERVICE, // Email service (like Gmail, SendGrid)
      port: process.env.SMTP_PORT || 587, // Port 587 for secure connections
      auth: {
        user: process.env.SMTP_MAIL, // SMTP email
        pass: process.env.SMTP_PASSWORD, // SMTP password or app-specific password
      },
    });
  }
  async sendEmail() {
    const mailOptions = {
      from: `"Your App" <${process.env.SMTP_MAIL}>`, // Sender email
      to: this.recipientEmail, // Recipient email
      subject: this.emailSubject, // Subject of the email
      text: this.emailMessage, // Plain text body
    };
    try {
      const info = await this.transporter.sendMail(mailOptions);
      console.log('Email sent: %s', info.messageId); // Log the success
      return info;
    } catch (error) {
      console.error('Error sending email:', error); // Log the error
      throw new Error('Email could not be sent');
    }
  }
}
export default EmailService;

//googleAuthServices.js
import { OAuth2Client } from 'google-auth-library';
import User from '../models/userModel.js'; // Adjust the path if needed
import JwtService from './jwtServices.js'; // Import the JwtService
const CLIENT_ID = process.env.GOOGLE_CLIENT_ID;
const CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;
const oauth2Client = new OAuth2Client(CLIENT_ID, CLIENT_SECRET);

/**
 * Verify Google ID Token and get user info
 * @param {string} googleToken - Google ID token
 * @returns {Promise<Object>} - User information
 */
const verifyGoogleToken = async (googleToken) => {
    try {
        const ticket = await oauth2Client.verifyIdToken({
            idToken: googleToken,
            audience: CLIENT_ID,
        });
        const payload = ticket.getPayload();
        return payload;
    } catch (error) {
        throw new Error('Invalid Google Token');
    }
};

/**
 * Handle Google authentication
 * @param {string} googleToken - Google ID token
 * @param {object} res - The response object to send JWT token
 * @returns {Promise<Object>} - User data and JWT token
 */
const authenticateWithGoogle = async (googleToken, res) => {
    const { email, name, sub: googleId } = await verifyGoogleToken(googleToken);
    let user = await User.findOne({ where: { email } });
    if (!user) {
        let username = name;
        let existingUser = await User.findOne({ where: { username } });
        while (existingUser) {
            username = `${name}${Math.floor(Math.random() * 10000)}`;
            existingUser = await User.findOne({ where: { username } });
        }
        user = await User.create({
            email,
            username,
            google_auth_id: googleId,
            password: null,
        });
    }
    JwtService.sendToken(user, 200, res, 'Google authentication successful');
};

export { authenticateWithGoogle };

//jwtServices.js
import jwt from 'jsonwebtoken';
import User from '../models/userModel.js';
import { jwtConfig } from '../config/jwtConfig.js';
class JwtService {
    // Method to generate a JWT token
    static generateToken(user) {
        try {
            return jwt.sign({ id: user.id }, jwtConfig.secretKey, {
                expiresIn: jwtConfig.expiresIn, // From config
            });
        } catch (error) {
            throw new Error('Error generating JWT token');
        }
    }
    // Method to verify a JWT token
    static verifyToken(token) {
        return new Promise((resolve, reject) => {
            jwt.verify(token, jwtConfig.secretKey, (err, decoded) => {
                if (err) {
                    reject(new Error('Invalid or expired token'));
                } else {
                    resolve(decoded);
                }
            });
        });
    }
    // Method to extract the user from the token
    static async getUserFromToken(token) {
        try {
            const decoded = await this.verifyToken(token);
            const user = await User.findByPk(decoded.id); 
            if (!user) {
                throw new Error('User not found');
            }
            return user;
        } catch (error) {
            throw new Error(error.message || 'Unable to retrieve user from token');
        }
    }
    static sendToken(user, statusCode, res, message) {
        try {
            const token = this.generateToken(user);
            const options = {
                expires: new Date(Date.now() + jwtConfig.cookieExpire * 24 * 60 * 60 * 1000), 
                httpOnly: true, 
            };
            const userData = {
                id: user.id,
                username: user.username,
                email: user.email,
            };
            res.status(statusCode)
                .cookie('token', token, options) 
                .header('Authorization', `Bearer ${token}`) 
                .json({
                    success: true,
                    user: userData,
                    message,
                    token,
                });
        } catch (error) {
            throw new Error('Error sending JWT token');
        }
    }
}
export default JwtService;

//app.js
import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import { errorMiddleware } from './middleware/errorHandler.js';
import authRoutes from './routes/authRoutes.js';
import userRoutes from './routes/userRoutes.js'
import channelRoutes from './routes/channelRoutes.js';
import messageRoutes from "./routes/messageRoutes.js";
import userChannelRelationRoutes from './routes/userChannelRelationRoutes.js'
import workspaceRoutes from './routes/workspaceRoutes.js';
import './models/index.js';
dotenv.config();
const app = express();
app.use(
  cors({
    origin: [process.env.FRONTEND_URL],
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    credentials: true,
  })
);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use('/api/v1/auth', authRoutes);
app.use('/api/v1/user',userRoutes);
app.use('/api/v1/workspace', workspaceRoutes);
app.use('/api/v1/workspace/:workspaceId/channel', channelRoutes);
app.use('/api/v1/workspace/:workspaceId/channel/:channelId',userChannelRelationRoutes);
app.use('/api/v1/workspace/:workspaceId/channel/:channelId/messages', messageRoutes);
app.use(errorMiddleware); // Error handling middleware
export default app;

//server.js
import http from 'http';
import app from './app.js'; // Importing your Express app
import dotenv from 'dotenv';
import { Server as SocketIOServer } from 'socket.io';
import postgresConnection from './config/databases/postgreconn.js';
import mongoConnection from './config/databases/mongoconn.js';
import JwtService from './services/jwtServices.js'
import { Message } from './models/messageModel.js';;
// import logger from "./utils/logger.js";
dotenv.config(); // Load environment variables
// Set up the port from environment variables or default to 5000
const PORT = process.env.PORT || 3000;
async function startServer() {
  try {
    await postgresConnection.authenticate();
    console.log("PostgreSQL connection has been established successfully");
    await mongoConnection();
    console.log("MongoDB connection has been established successfully");
    const server = http.createServer(app);
    const io = new SocketIOServer(server, {
      cors: {
        origin: process.env.FRONTEND_URL,
        methods: ['GET', 'POST'],
      },
    });
      io.use(async (socket, next) => {
        try {
          const token = socket.handshake.auth.token;
          const decoded = await JwtService.verifyToken(token);
          socket.user = decoded;
          next();
        } catch (err) {
          next(new Error('Authentication error'));
        }
      });
      io.on('connection', (socket) => {
        console.log('A user connected: ', socket.id);
        socket.on('joinRoom', (channelId) => {
          socket.join(channelId);
          console.log(`User ${socket.id} joined room ${channelId}`);
        });
      socket.on('sendMessage', async (messageData) => {
        try {
          const { channelId, message, userId } = messageData;
          const newMessage = await Message.create({
            message: message,
            channel_id: channelId,
            user_id: userId,
            timestamp: new Date(),
          });
          io.to(channelId).emit('newMessage', newMessage);
        } catch (error) {
          socket.emit('error', {
            message: 'Failed to send message'
          });
        }
      });
      socket.on('disconnect', () => {
        console.log(`User ${socket.id} disconnected`);
      });
    });
    // Start listening on the specified port
    server.listen(PORT, () => {
      console.log(`Server running on port ${PORT}`);
    });
  } catch (error) {
    console.log('Unable to start the server: ', error);
    process.exit(1);
  }
}
// Create the HTTP server and pass in the Express app
startServer();