frontend
|-node_modules
|-public
| |-images
| |-index.html
|-src
| |-components
| | |-SpaceRobot
| | | |-FloatingRobot.png
| | | |-SpaceRobot.css
| | | |-SpaceRobot.js
| | |-PageLayout.js
| |-pages
| | |-landingpage
| | | |-LandingPage.css
| | | |-LandingPage.js
| | |-signinpage
| | | |-SignInPage.css
| | | |-SignInPage.js
| | |-signuppage
| | | |-SignUpPage.css
| | | |-SignUpPage.js
| |-style
| | |-style.css
| |-App.css
| |-App.js
| |-index.css
| |-index.js
|-.gitignore

/* SpaceRobot.css */
.space-robot {
  position: fixed;
  border-radius: 50%;
  background-color: transparent;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  z-index: 2;
  transition: transform 6s ease, left 4s ease, right 4s ease;
}

.space-robot.linearTransition {
  left: 50%;
}

.space-robot.left {
  left: -50%;
}

.space-robot svg {
  width: 100%;
  height: 100%;
  fill: #fff;
}

// SpaceRobot.js
import React, { useState, useEffect } from 'react';
import './SpaceRobot.css';
import FloatingRobotImage from '../SpaceRobot/FloatingRobot.png';

const SpaceRobot = () => {
  const [position, setPosition] = useState({ top: '0', left: '0' });
  const [size, setSize] = useState('50px');
  const [rotation, setRotation] = useState(0);
  const [linearTransition, setLinearTransition] = useState(false);

  useEffect(() => {
    const intervalId = setInterval(() => {
      // Enable linear transition
      setLinearTransition(true);

      setTimeout(() => {
        // Reset rotation and disable linear transition
        setRotation(0);
        setLinearTransition(false);

        // After the delay, rotate with a random amount between 36 and 360 degrees
        const randomRotation = Math.random() * (360 - 36) + 36;
        setRotation(randomRotation);

        setTimeout(() => {
          // After rotation, set new position
          const newPosition = {
            top: (Math.random() * window.innerHeight) * 0.75 + 'px',
            left: (Math.random() * window.innerWidth) * 0.75 + 'px',
          };
          const newSize = Math.random() * 100 + 'px';

          setPosition(newPosition);
          setSize(newSize);
        }, 6000); // Adjust the rotation delay as needed
      }, 2000); // Adjust the initial delay as needed
    }, 8000); // Adjust the total interval time as needed

    return () => clearInterval(intervalId);
  }, []);

  return (
    <div
      className={`space-robot ${linearTransition ? 'linearTransition' : ''}`}
      style={{
        top: position.top,
        left: position.left,
        width: size,
        height: size,
        transform: `rotate(${rotation}deg)`,
      }}
    >
      <img src={FloatingRobotImage} alt="Floating Robot" />
    </div>
  );
};

export default SpaceRobot;
// PageLayout.js
import React from 'react';
const PageLayout = ({ children }) => {
  return (
    <div style={pageStyle}>
      {children}
    </div>
  );
};
const pageStyle = {
  background:`url("images/space1.jpg")`,
  backgroundSize: 'cover',
  backgroundPosition: 'center',
  minHeight: '100vh',
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  justifyContent: 'center',
  color: 'white',
};

export default PageLayout;
/* LandingPage.css */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: rgba(0, 0, 0, 0);
    padding: 15px;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 3;
    width: 85vw;
    margin: 0 auto;
  }
  .logo a{
    color: #FFFFFF;
    font-size: 2em;
    font-style: normal;
    font-weight: 700;
    line-height: normal;
    margin-top: 0.5vw;
    text-decoration: none;
    font-family: 'Quicksand';
    margin-left: 1rem;
    letter-spacing: 0.1em;
    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);
}
  .links a {
    color: white;
    font-family: 'Inter';
    text-decoration: none;
    margin-right: 20px;
    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);
    cursor: pointer;
  }
  .landing-nav-func{
    display: flex;
    align-items: center;
    align-content: center;
  }
  .landing-nav-func img {
    width: 2vw;
    height: 2vw;
    flex-shrink: 0;
    margin-top: 1.4vw;
    margin-right: 1vw;
    align-items: center;
    cursor: pointer;
}
.links {
    font-size: 18px;
    font-style: normal;
    font-weight: 400;
    line-height: normal;
    margin-top: 0.4vw;
    margin-right: 3vw;
}
.links a{
    color: white;
    text-decoration: none;
    font-size: 1.2em;
    cursor: pointer;
}
.explore-button {
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
}

.explore-button button {
  background: transparent;
  border: 1px solid white;
  color: white;
  cursor: pointer;
  border-radius: 8px;
  font-weight: bold;
  width: 12vw; 
  height: 4vw;
  text-align: center;
  font-size: 1.5vw; 
  line-height: 2;
  margin: 0;
}

.explore-button button:hover {
  background-color: #3498db;
  color: #ffffff;
}

  .content {
    position: relative;
    top: 1vw;
    font-size: 1.2em;
  }
  
  .right-side-area {
    display: flex;
    flex-direction: column;
    margin-left: 42%;
    margin-bottom: 14%;
    margin-right: 7%;
    margin-top: 6%;
    z-index: 3;
    padding-top: 0%;
  }
  .WhiteText,
  .YelloText{
    font-family: 'Inter';
    font-weight: bold;
    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);
  }
  .WhiteText{ 
    color: #FFFFFF;
    margin-top: -8%;
    margin-bottom: 1%;
  }
  .YelloText{
    color: #FFB409;
    margin-top: 0%;
    margin-bottom: 8%;
  }
  .connect{
    font-family: 'Quicksand';
    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);
    font-weight: bold;
    letter-spacing: 0.06em;
  }
  .content {
    max-width: 600px;
    margin-top: 0;
  }
  
 .signup_btns {
  display: flex;
  gap: 10px;
  margin-top: 2vw;
}

.email_signup_btn,
.ggl_signup_btn {
  overflow: hidden; 
  white-space: nowrap;
  padding: 10px 20px;
  border: none;
  cursor: pointer;
  width: 20vw;
  height: 4.5vw;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center; 
  border-radius: 0.25em;
}
.ggl_signup_btn:hover {
  background-color: #3498db; 
  color: #ffffff;
}
.email_signup_btn:hover{
  background-color: #d85bb5;
  color: wheat;
}
.email_signup_btn {
  background-color: #FFFFFF;
  color: #31304D; ;
}

.email_signup_btn span,
.ggl_signup_btn span{
  text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);
  font-weight: bold;
  font-family: 'Inter';
  font-size: 1.25vw;
}
.ggl_signup_btn {
  background-color: #FFB409;
  color: black; 
}

.ggl_signup_btn img {
  margin-left: 0.5vw;
  height: 2.5vw;
  width: 2.5vw;
  border-radius: 0.3vw;
}
  .bottom-text {
    text-align: center;
    margin-top: -7%;
    z-index: 3; /* Adjust as needed */
  }
  
  .center-text {
    font-family: 'Quicksand';
    font-size: 1.5em; /* Adjust as needed */
    color: #FFFFFF;
    font-weight: bold;
    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);
    letter-spacing: 0.07rem;
     /* Adjust as needed */
  }
  // LandingPage.js
import React from 'react';
import PageLayout from '../../components/PageLayout';
import { Link } from 'react-router-dom';
import { useNavigate } from 'react-router-dom';
import { useGoogleLogin } from 'react-google-login';
import axios from 'axios';
import '../../style/style.css';
import './LandingPage.css'
import SpaceRobot from '../../components/SpaceRobot/SpaceRobot';
const LandingPage = () => {
  const navigate = useNavigate();
  const apiUrl = 'http://localhost:8080/api/v1/auth/signup';  // Replace with your signup API endpoint

  const responseGoogle = async (googleData) => {
    try {
      const response = await axios.post(apiUrl, { tokenId: googleData.tokenId });
      console.log('Google Sign-Up successful', response.data);

      // Redirect to dashboard after successful signup
      navigate('/dashboard');
    } catch (error) {
      console.error('Sign-Up failed', error);
    }
  };

  const { signIn } = useGoogleLogin({
    onSuccess: responseGoogle,
    onFailure: responseGoogle,
    clientId: 'YOUR_GOOGLE_CLIENT_ID', // Replace with your actual Google Client ID
    isSignedIn: false,
    
  });
  console.log(signIn);
  const handleEmailSignup = () => {
    navigate('/signup');
  };
  return (
    <PageLayout>
      <div className="upper-left-vector"></div>
      <nav className="navbar">
        <div className="logo">
          <Link to="/">SLACK</Link>
        </div>
        <div className="landing-nav-func">
          <img src="./images/magnifine_glass.png" alt="MG" />
          <div className="links">
            <Link to="/signin">Sign In</Link>
          </div>
          <div className="explore-button">
            <button >EXPLORE</button>
          </div>
        </div>
      </nav>
      {/* <h1>LandingPage</h1> */}
      {/* Add more content for the landing page here */}
      <div className="right-side-area">
        <div className="content">
          <h1 className='WhiteText'>Made For People.</h1>
          <h1 className='YelloText'>Built For Productivity</h1>
          <p className='connect'>Connect the right people, find anything that you need and automate the rest. Thatâ€™s work in Slack, your productivity platform.</p>
        </div>
        <div className="signup_btns">
          <button className="email_signup_btn" onClick={handleEmailSignup}><span>SIGN UP WITH EMAIL ADDRESS</span></button>
          <button className="ggl_signup_btn"><img src='./images/google_icon.png' alt='G' className='gimg' /><span>SIGN UP WITH GOOGLE</span></button>
        </div>
      </div>
      <div className="bottom-text">
        <p className="center-text">Slack is free to try for as long as you like</p>
      </div>
      <SpaceRobot />
    </PageLayout>
  );
};

export default LandingPage;
/* SignInPage.css */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: rgba(0, 0, 0, 0); /* Transparent background */
    padding: 15px;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 3;
  }
  .logo a{
    color: #FFFFFF;
    font-size: 32px;
    font-style: normal;
    font-weight: 700;
    line-height: normal;
    margin-top: 0.5vw;
    text-decoration: none;
    font-family: 'Quicksand';
    margin-left: 1rem;
    letter-spacing: 0.1em;
    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);
}
  .signin-nav-func{
    display: flex;
    flex-direction: column;
  }
  .question{
    font-family: 'Quicksand';
    color: #FFFFFF;
    font-weight: bold;
    letter-spacing: 0.6px;
  }
  .links_signup a{
    font-family: 'Quicksand';
    color: #000000;
    font-weight: bold;
    letter-spacing: 0.6px;
    text-decoration: none;
  }
  .centered-container{
    display: flex;
    flex-direction: column;
    align-items: center;
    z-index: 3;
  }
  form{
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .content {
    margin-top: 80px; /* Adjust margin to account for fixed navbar */
  }
  .signin-msg{
   width: 100%;
   font-style: normal;
   color: #FFFFFF;
   margin-top: 0px;
   text-align: center;
   font-size: 290%;
  font-family: 'Inter';
  font-weight: bold;
  margin-bottom: 0%;
}
.signin-sugg{
  margin-top: 5px;
font-family: 'Quicksand';
font-style: normal;
font-weight: 700;
letter-spacing: 0.04em;
color: #FFFFFF;
margin-bottom: 2%;
font-size: 16px;
}
.signin-ggl { 
  display: flex;
  flex-direction: row;
  align-items: center;
  width: 22em;
  height: 3em;
  border-radius: 8px;
  font-size: 20px; 
  box-sizing: border-box;
  margin-bottom: 10px;
  color: #000000;
  border: 0.1em solid #FFFFFF; 
  background: linear-gradient(0deg, #d9d9d9, #d9d9d9), 
  linear-gradient(0deg, #ffffff, #ffffff);
}
.signin-ggl:hover{
  background:none;
  background-color: aqua;
}
.sgnggl{
  font-size: 1em;
  font-weight: 500;
  font-family: 'Inter';
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
  margin-left: 2.7vw;

}
.gimg{
  height: 2.1em;
  width: 2.1em;
  margin-right: 10%;
  border-radius: 0.3vw;
}
.or{
  font-family: 'Quicksand';
  font-weight: bold;
  color: #FFFFFF;
  font-size: 30px;
  margin-top: 0px;
  margin-bottom: 0px;
}
.signin-email{
  display: flex;
  flex-direction: row;
  align-items: center;
  width: 22em;
  height: 3em;
  border-radius: 8px; 
  font-size: 20px; 
  border: 0.1em solid #FFFFFF; 
  background: linear-gradient(0deg, #d9d9d9, #d9d9d9), 
    linear-gradient(0deg, #ffffff, #ffffff); 
  box-sizing: border-box;
  margin-top: 10px;
}
.signin-email::placeholder {
  text-align: center;
  color: #000000; /* Replace with the desired color code */
  font-size: 20px;
}
.sub-btn{
  text-align: center;
  color: #FFFFFF;
  background-color: #4A154B;
  width: 22em;
  height: 3em;
  border-radius: 8px;
  font-size: 20px; 
  border: none;
  margin-top: 1em;
}
  /* Add media queries for responsiveness as needed */
// SignInPage.js
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useNavigate } from 'react-router-dom';
import { useGoogleLogin } from 'react-google-login';
import axios from 'axios';
import PageLayout from '../../components/PageLayout';
import SpaceRobot from '../../components/SpaceRobot/SpaceRobot';
import '../../style/style.css';
import './SignInPage.css';

const SignInPage = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    email: '',
  });

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const apiUrl = 'http://localhost:8080/api/v1/auth/signin';

  const responseGoogle = (googleData) => {
    handleSubmit(null, true, googleData);
  };

  const { signIn } = useGoogleLogin({
    onSuccess: responseGoogle,
    onFailure: responseGoogle,
    clientId: 'YOUR_GOOGLE_CLIENT_ID', // Replace with your actual Google Client ID
    isSignedIn: true,
  });

  const handleSubmit = async (e, isGoogleSignIn, googleData) => {
    e && e.preventDefault();

    try {
      if (isGoogleSignIn) {
        const response = await axios.post(apiUrl, { tokenId: googleData.tokenId });
        console.log('Google Sign-In successful', response.data);
      } else {
        // Handle email-based sign-in
        const response = await axios.post(apiUrl, formData);
        console.log('Email-based Sign-In successful', response.data);
      }

      // Redirect to dashboard after successful sign-in
      navigate('/dashboard');
    } catch (error) {
      console.error('Sign-In failed', error);
    }
  };

  return (
    <PageLayout>
      <div className="upper-right-vector"></div>
      <nav className="navbar">
        <div className="logo">
          <Link to="/">SLACK</Link>
        </div>
        <div className="signin-nav-func">
          <div className='question'>New to slack?</div>
          <div className='links_signup'>
            <Link to="/signup">Create an account</Link>
          </div>
        </div>
      </nav>
      <div className="centered-container">
        <h1 className='signin-msg'>Sign in to Slack</h1>
        <p className='signin-sugg'>We suggest using the email address that you use at work</p>
      <button onClick={signIn} className='signin-ggl'>
        <img src='./images/google_icon.png' alt='G' className='gimg' />
        <span className='sgnggl'>Sign in with Google</span>
      </button>
      <span className='or'>OR</span>
      <form onSubmit={(e) => handleSubmit(e, false)}>
        <input
            type="text"
            placeholder="name@workemail.com"
            className="signin-email"
            name="email"
            value={formData.email}
            onChange={handleChange}
          />
        <button type="submit" className="sub-btn">Sign in with Email</button>
      </form>
      </div>
      <SpaceRobot/>
    </PageLayout>
  );
};

export default SignInPage;
/* SignUpPage.css */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: rgba(0, 0, 0, 0); /* Transparent background */
    padding: 15px;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 3;
  }
  .logo a{
    color: #FFFFFF;
    font-size: 32px;
    font-style: normal;
    font-weight: 700;
    line-height: normal;
    margin-top: 0.5vw;
    text-decoration: none;
    font-family: 'Quicksand';
    margin-left: 1rem;
    letter-spacing: 0.1em;
    text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);
}
.centered-container{
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  text-align: center; 
  z-index: 3;
}
h1{
  font-size: 290%;
  font-family: 'Inter';
  font-weight: bold;
  margin-bottom: 0%;
}

.sign-in-sugg{
  margin-top: 5px;
  font-family: 'Quicksand';
  font-style: normal;
  font-weight: 700;
  letter-spacing: 0.04em;
  color: #FFFFFF;
  margin-bottom: 4vw;
  font-size: 16px;
}

.login-link{
  color: #FFFFFF;
}
input{
  width: 30em;
  height: 4em;
  margin: 0.7em;
  border-radius: 8px; 
  border: 0.25em solid #FFFFFF; 
  background: linear-gradient(0deg, #d9d9d9, #d9d9d9), 
    linear-gradient(0deg, #ffffff, #ffffff); 
  box-sizing: border-box;
  padding-left: 5%;
}
input::placeholder{
  color: black;
  font-size: 130%;
  font-weight: 500;
}
button{
  width: 30em;
  height: 4em;
  margin-top: 3em;
  background-color: #4A154B;
  border: none;
  border-radius: 8px;
  color: #FFFFFF;
  font-family: 'Inter';
  cursor: pointer;
}
button:hover{
  background-color: #812a8b;
}
.reg-p{
  font-size: 170%;
  text-align: center;
  font-weight: 50;
  margin: 0%;
}
.askbro{
  font-weight: 10;
  letter-spacing: 0.05em;
}
.login-link{
  text-decoration: none;
  font-weight: bold;
}
.login-link:hover{
  text-shadow: 2px 2px 2px rgba(255, 255, 255, 0.3) ;
}
// SignUpPage.jss
import React, { useState } from 'react';
import PageLayout from '../../components/PageLayout';
import { Link } from 'react-router-dom';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../../style/style.css';
import './SignUpPage.css';
import SpaceRobot from '../../components/SpaceRobot/SpaceRobot';

const SignUpPage = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
  });

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const apiUrl = 'http://localhost:8080/api/v1/auth/register';
  const handleSubmit = async (e) => {
    e.preventDefault();
  
    try {
      const response = await axios.post(apiUrl, formData);
      console.log('Registration successful', response.data);
      navigate('/dashboard');
    } catch (error) {
      if (error.response) {
        // Access error.response if it exists
        console.error('Registration failed', error.response.data);
      } else {
        // Handle other types of errors (e.g., network errors)
        console.error('Registration failed', error.message);
      }
    }
  };

  return (
    <PageLayout>
      <div className="upper-right-vector"></div>
      <nav className="navbar">
        <div className="logo">
          <Link to="/">SLACK</Link>
        </div>
      </nav>
      <div className="centered-container">
        <h1>Sign up</h1>
        <p className="sign-in-sugg">We suggest using the email address that you use at work</p>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <input
              type="text"
              placeholder="First Name"
              name="firstName"
              value={formData.firstName}
              onChange={handleChange}
            />
          </div>
          <div className="form-group">
            <input
              type="text"
              placeholder="Last Name"
              name="lastName"
              value={formData.lastName}
              onChange={handleChange}
            />
          </div>
          <div className="form-group">
            <input
              type="email"
              placeholder="E-mail"
              name="email"
              value={formData.email}
              onChange={handleChange}
            />
          </div>
          <div className="form-group">
            <input
              type="password"
              placeholder="Password"
              name="password"
              value={formData.password}
              onChange={handleChange}
            />
          </div>
          <button type="submit">
            <p className='reg-p'>Register</p>
          </button>
        </form>
        <p className='askbro'>Already a member? <Link to="/signin" className="login-link">Log in</Link></p>
      </div>
      <SpaceRobot/>
    </PageLayout>
  );
};

export default SignUpPage;
/* styles.css */
.upper-left-vector {
    position: absolute;
    top: 0;
    left: 0;
    width: 32%;
    height: 315px;
    background: url("/public/images/Vector2.png") no-repeat;
    background-size: contain;
    background-position: top left;
    z-index: 1; /* Set a value higher than the z-index of other elements */
  }
  
  .upper-right-vector {
    position: absolute;
    top: 0;
    right: 0;
    width: 30%;
    height: 310px;
    background: url("/public/images/Vector3.png") no-repeat;
    background-size: contain;
    background-position: top right;
    z-index: 1; /* Set a value higher than the z-index of other elements */
  }
  /* App.css */
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
// App.js
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import LandingPage from './pages/landingpage/LandingPage';
import SignUpPage from './pages/signuppage/SignUpPage';
import SignInPage from './pages/signinpage/SignInPage';

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<LandingPage />} />
        <Route path="/signup" element={<SignUpPage />} />
        <Route path="/signin" element={<SignInPage />} />
      </Routes>
    </Router>
  );
};

export default App;
// indexed.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
